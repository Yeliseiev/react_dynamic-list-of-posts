{"version":3,"sources":["components/Loader/Loader.tsx","utils/fetchClient.ts","components/PostsList.tsx","api/posts.ts","components/NewCommentForm.tsx","api/comments.ts","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","index.tsx"],"names":["Loader","className","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","selectedUserId","selectedPost","onSelectPost","useState","posts","setPosts","isLoading","setIsLoading","error","setError","useEffect","getUserPostsFromServer","a","postsFromServer","length","map","post","id","title","type","classNames","onClick","handleSelectPost","NewCommentForm","onAddComment","nameInput","setNameInput","emailInput","setEmailInput","commentInput","setCommentInput","nameError","setNameError","emailError","setEmailError","commentError","setCommentError","isAddingComment","setIsAddingComment","postComment","e","preventDefault","trim","newComment","name","email","Error","onSubmit","htmlFor","placeholder","value","onChange","target","getComments","postId","deleteComment","commentId","comment","CommentsList","comments","setComments","loadError","setLoadError","addError","setAddError","deleteError","setDeleteError","isFormVisible","setIsFormVisible","getPostCommentsFromServer","commentsFromServer","postNewComment","useCallback","addedComment","currentComment","handleDeleteComment","tempComments","currentComments","filter","timer","clearTimeout","href","PostDetails","UserSelector","React","memo","users","selectedUser","selectUser","isListOpened","setIsListOpened","selectionRef","useRef","handleSelectUser","user","handleClickOutside","event","current","contains","window","addEventListener","removeEventListener","ref","role","App","setUsers","setSelectedUser","setSelectedPost","getUsersFromServer","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"wTAEaA,EAAS,kBACpB,qBAAKC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,uBCJbC,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDU,EAIH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,WCzB3Ba,EAA6B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,eACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,EAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KA6BA,OAnBAC,qBAAU,WACR,IAAMC,EAAsB,uCAAG,4BAAAC,EAAA,sEAE3BV,EAAa,MACbK,GAAa,GACbE,GAAS,GAJkB,SC1B1BX,EAAA,wBD+B0CE,IALhB,OAKrBa,EALqB,OAO3BR,EAASQ,GAPkB,kDAS3BJ,GAAS,GATkB,yBAW3BF,GAAa,GAXc,6EAAH,qDAe5BI,MACC,CAACX,IAEAM,EACK,cAAC,EAAD,IAGLE,EAEA,qBACE9B,UAAU,yBACV,UAAQ,oBAFV,mCASC0B,EAAMU,OAST,sBAAK,UAAQ,YAAb,UACE,mBAAGpC,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACG0B,EAAMW,KAAI,SAAAC,GACT,IAAQC,EAAcD,EAAdC,GAAIC,EAAUF,EAAVE,MAEZ,OACE,qBACE,UAAQ,OADV,UAIE,oBAAI,UAAQ,SAAZ,SAAsBD,IAEtB,oBAAI,UAAQ,YAAZ,SACGC,IAGH,oBAAIxC,UAAU,8BAAd,SACE,wBACEyC,KAAK,SACL,UAAQ,aACRzC,UAAW0C,IACT,SACA,UACA,CAAE,WAAYnB,IAAiBe,IAEjCK,QAAS,kBAvFF,SAACL,GAEtBd,EADED,IAAiBe,EACNA,EAEA,MAmFgBM,CAAiBN,IARlC,SAUGf,IAAiBe,EACd,QACA,aArBHC,cA1Bf,qBAAKvC,UAAU,0BAA0B,UAAQ,aAAjD,2B,eEzDO6C,EAAkC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAChD,EAAkCrB,mBAAS,IAA3C,mBAAOsB,EAAP,KAAkBC,EAAlB,KACA,EAAoCvB,mBAAS,IAA7C,mBAAOwB,EAAP,KAAmBC,EAAnB,KACA,EAAwCzB,mBAAS,IAAjD,mBAAO0B,EAAP,KAAqBC,EAArB,KACA,EAAkC3B,oBAAS,GAA3C,mBAAO4B,EAAP,KAAkBC,EAAlB,KACA,EAAoC7B,oBAAS,GAA7C,mBAAO8B,EAAP,KAAmBC,EAAnB,KACA,EAAwC/B,oBAAS,GAAjD,mBAAOgC,EAAP,KAAqBC,EAArB,KACA,EAA8CjC,oBAAS,GAAvD,mBAAOkC,EAAP,KAAwBC,EAAxB,KAiBMC,EAAW,uCAAG,WAAOC,GAAP,eAAA5B,EAAA,yDAClB4B,EAAEC,iBAfFT,GAAcP,EAAUiB,QACxBR,GAAeP,EAAWe,QAC1BN,GAAiBP,EAAaa,UAgB1BjB,GAAaE,GAAcE,GAJb,iCAMdS,GAAmB,GAEbK,EAAa,CACjBC,KAAMnB,EACNoB,MAAOlB,EACPrC,KAAMuC,GAXM,SAcRL,EAAamB,GAdL,+DAgBR,IAAIG,MAAM,yBAhBF,yBAkBdR,GAAmB,GACnBR,EAAgB,IAnBF,6EAAH,sDAwBjB,OACE,uBACE,UAAQ,iBACRiB,SAAUR,EAFZ,UAIE,sBAAK7D,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQsE,QAAQ,sBAAjC,yBAIA,sBAAKtE,UAAU,yCAAf,UACE,uBACEyC,KAAK,OACLyB,KAAK,OACL3B,GAAG,sBACHgC,YAAY,eACZvE,UAAW0C,IACT,QACA,CAAE,YAAaW,IAEjBmB,MAAOzB,EACP0B,SAAU,SAACX,GACTd,EAAac,EAAEY,OAAOF,OACtBlB,GAAa,MAIjB,sBAAMtD,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdqD,GACC,sBACErD,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBqD,GACC,mBAAGrD,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQsE,QAAQ,uBAAjC,0BAIA,sBAAKtE,UAAU,yCAAf,UACE,uBACEyC,KAAK,OACLyB,KAAK,QACL3B,GAAG,uBACHgC,YAAY,iBACZvE,UAAW0C,IACT,QACA,CAAE,YAAaa,IAEjBiB,MAAOvB,EACPwB,SAAU,SAACX,GACTZ,EAAcY,EAAEY,OAAOF,OACvBhB,GAAc,MAIlB,sBAAMxD,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGduD,GACC,sBACEvD,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBuD,GACC,mBAAGvD,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQsE,QAAQ,eAAjC,0BAIA,qBAAKtE,UAAU,UAAf,SACE,0BACEuC,GAAG,eACH2B,KAAK,OACLK,YAAY,oBACZvE,UAAW0C,IACT,WACA,CAAE,YAAae,IAEjBe,MAAOrB,EACPsB,SAAU,SAACX,GACTV,EAAgBU,EAAEY,OAAOF,OACzBd,GAAgB,QAKrBD,GACC,mBAAGzD,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEyC,KAAK,SACLzC,UAAW0C,IACT,SACA,UACA,CAAE,aAAciB,IALpB,mBAaF,qBAAK3D,UAAU,UAAf,SAEE,wBACEyC,KAAK,QACLzC,UAAU,0BACV2C,QA7KO,WACfW,GAAa,GACbE,GAAc,GACdE,GAAgB,GAChBV,EAAa,IACbE,EAAc,IACdE,EAAgB,KAoKV,4BC9LGuB,EAAc,SAACC,GAC1B,OAAOxD,EAAA,2BAA0CwD,KAGtCC,EAAgB,SAACC,GAC5B,OAAO1D,EAAA,oBAA2B0D,KAGvBjB,EAAc,SAACkB,GAC1B,OAAO3D,EAAqB,YAAa2D,ICF9BC,EAAgC,SAAC,GAAgB,IAAdJ,EAAa,EAAbA,OAC9C,EAAgCnD,mBAAoB,IAApD,mBAAOwD,EAAP,KAAiBC,EAAjB,KACA,EAAkCzD,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAO0D,EAAP,KAAkBC,EAAlB,KACA,EAAgC3D,oBAAS,GAAzC,mBAAO4D,EAAP,KAAiBC,EAAjB,KACA,EAAsC7D,oBAAS,GAA/C,mBAAO8D,EAAP,KAAoBC,EAApB,KACA,EAA0C/D,oBAAS,GAAnD,mBAAOgE,EAAP,KAAsBC,EAAtB,KAEMC,EAAyB,uCAAG,4BAAAzD,EAAA,sEAE9BgD,EAAY,IACZQ,GAAiB,GACjBN,GAAa,GACbvD,GAAa,GALiB,SAMG8C,EAAYC,GANf,OAMxBgB,EANwB,OAQ9BV,EAAYU,GARkB,kDAU9BR,GAAa,GAViB,yBAY9BvD,GAAa,GAZiB,6EAAH,qDAgBzBgE,EAAiBC,sBAAW,uCAAC,WAAOf,GAAP,iBAAA7C,EAAA,6DAC3B+B,EAD2B,2BACTc,GADS,IACAH,WADA,kBAIJf,EAAYI,GAJR,OAIzB8B,EAJyB,OAM/Bb,GAAY,SAAAc,GAAc,4BAAQA,GAAR,CAAwBD,OANnB,gDAQ/BT,GAAY,GARmB,yDAAD,sDAU/B,IAEGW,EAAsBH,sBAAW,uCAAC,WAAOhB,GAAP,eAAA5C,EAAA,6DAChCgE,EADgC,YACbjB,GAEzBC,GAAY,SAAAiB,GAAe,OACzBA,EAAgBC,QAAO,SAAArB,GAAO,OAAIA,EAAQxC,KAAOuC,QAJb,SAQpCU,GAAe,GARqB,SAS9BX,EAAcC,GATgB,uDAWpCI,EAAYgB,GACZV,GAAe,GAZqB,yDAAD,sDAcpC,IAeH,OAbAxD,qBAAU,WACR2D,MACC,CAACf,IAEJ5C,qBAAU,WACR,IAAMqE,EAAQ/F,YAAW,WACvBkF,GAAe,GACfF,GAAY,KACX,KAEH,OAAO,kBAAMgB,aAAaD,MACzB,CAAChB,EAAUE,IAEV3D,EACK,cAAC,EAAD,IAGLuD,EAEA,qBAAKnF,UAAU,yBAAyB,UAAQ,gBAAhD,kCAOF,qCACIiF,EAAS7C,OAOP,qCACE,mBAAGpC,UAAU,aAAb,uBAECiF,EAAS5C,KAAI,SAAA0C,GAAO,OACnB,0BACE/E,UAAU,mBACV,UAAQ,UAFV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBACEuG,KAAI,iBAAYxB,EAAQZ,OACxB,UAAQ,gBAFV,SAIGY,EAAQb,OAEX,wBACE,UAAQ,gBACRzB,KAAK,SACLzC,UAAU,kBACV,aAAW,SACX2C,QAAS,kBAAMsD,EAAoBlB,EAAQxC,KAL7C,8BAWF,qBAAKvC,UAAU,eAAe,UAAQ,cAAtC,SACG+E,EAAQnE,SArBNmE,EAAQxC,UAZnB,mBAAGvC,UAAU,aAAa,UAAQ,oBAAlC,6BAwCHqF,GACC,qBACErF,UAAU,yBACV,UAAQ,gBAFV,mCAQDuF,GACC,qBACEvF,UAAU,yBACV,UAAQ,gBAFV,kCAQAyF,EAWE,cAAC,EAAD,CAAgB3C,aAAc+C,IAT9B,wBACE,UAAQ,qBACRpD,KAAK,SACLzC,UAAU,iBACV2C,QAAS,kBAAM+C,GAAiB,IAJlC,iCC/IGc,EAA+B,SAAC,GAAc,IAAZlE,EAAW,EAAXA,KACrCC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,MAAO5B,EAAS0B,EAAT1B,KAEnB,OACE,qBAAKZ,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOuC,EADP,aACcC,KAGd,mBAAG,UAAQ,WAAX,SACG5B,OAIL,qBAAKZ,UAAU,QAAf,SACE,cAAC,EAAD,CAAc4E,OAAQtC,EAAKC,aCVxBkE,EAAgCC,IAAMC,MAAK,YAIjD,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACAC,EACI,EADJA,WAEA,EAAwCrF,oBAAS,GAAjD,mBAAOsF,EAAP,KAAqBC,EAArB,KACMC,EAAeC,iBAAuB,MAEtCC,EAAmBrB,uBAAY,SAACsB,GACpCN,EAAWM,GACXJ,GAAgB,KACf,IAiBH,OAfAhF,qBAAU,WACR,IAAMqF,EAAqB,SAACC,GAExBL,EAAaM,UACTN,EAAaM,QAAQC,SAASF,EAAM5C,SAExCsC,GAAgB,IAMpB,OAFAS,OAAOC,iBAAiB,QAASL,GAE1B,kBAAMI,OAAOE,oBAAoB,QAASN,MAChD,IAGD,sBACE,UAAQ,eACRrH,UAAW0C,IACT,WACA,CAAE,YAAaqE,IAEjBa,IAAKX,EANP,UAQE,qBAAKjH,UAAU,mBAAf,SACE,yBACEyC,KAAK,SACLzC,UAAU,SACV,gBAAc,OACd,gBAAc,gBACd2C,QAAS,kBAAMqE,GAAiBD,IALlC,UAOE,+BACGF,EACGA,EAAa3C,KACb,kBAGN,sBAAMlE,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBACEA,UAAU,gBACVuC,GAAG,gBACHsF,KAAK,OAHP,SAKE,qBAAK7H,UAAU,mBAAf,SACG4G,EAAMvE,KAAI,SAAA+E,GACT,IAAQ7E,EAAa6E,EAAb7E,GAAI2B,EAASkD,EAATlD,KAEZ,OACE,mBAEEqC,KAAI,gBAAWhE,GACfvC,UAAW0C,IACT,gBACA,CAAE,YAAamE,IAAiBO,IAElCzE,QAAS,kBAAMwE,EAAiBC,IAPlC,SASGlD,GARI3B,gBCtERuF,EAAgB,WAC3B,MAA0BrG,mBAAiB,IAA3C,mBAAOmF,EAAP,KAAcmB,EAAd,KACA,EAAwCtG,mBAAsB,MAA9D,mBAAOoF,EAAP,KAAqBmB,EAArB,KACA,EAAwCvG,mBAAsB,MAA9D,mBAAOF,EAAP,KAAqB0G,EAArB,KAEMd,EAAmBrB,uBAAY,SAACsB,GACpCY,EAAgBZ,KACf,IAEGxE,EAAmBkD,uBAAY,SAACxD,GACpC2F,EAAgB3F,KACf,IAgBH,OAdAN,qBAAU,WACR,IAAMkG,EAAkB,uCAAG,4BAAAhG,EAAA,+ECvBtBd,EAAmB,UDuBG,OAEjB+G,EAFiB,OAIvBJ,EAASI,GAJc,sDAMjB,IAAI/D,MAAM,oBANO,yDAAH,qDAUxB8D,MACC,IAGD,sBAAMlI,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAACyG,EAAD,CACEG,MAAOA,EACPC,aAAcA,EACdC,WAAYK,MAIhB,qBAAKnH,UAAU,QAAQ,UAAQ,cAA/B,SACI6G,EAOE,cAAC,EAAD,CACEvF,eAAgBuF,EAAatE,GAC7BhB,aAAcA,EACdC,aAAcoB,IARhB,mBAAG,UAAQ,iBAAX,qCAgBV,qBACE,UAAQ,UACR5C,UAAW0C,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiBnB,IAPvB,SAUE,qBAAKvB,UAAU,gCAAf,SACGuB,GAAgB,cAAC,EAAD,CAAae,KAAMf,gBEhFlD6G,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.567b346f.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from './Loader';\nimport { Post } from '../types/Post';\nimport { getUserPosts } from '../api/posts';\n\ntype Props = {\n  selectedUserId: number;\n  selectedPost: Post | null;\n  onSelectPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  selectedPost,\n  onSelectPost,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleSelectPost = (post: Post) => {\n    if (selectedPost !== post) {\n      onSelectPost(post);\n    } else {\n      onSelectPost(null);\n    }\n  };\n\n  useEffect(() => {\n    const getUserPostsFromServer = async () => {\n      try {\n        onSelectPost(null);\n        setIsLoading(true);\n        setError(false);\n        const postsFromServer = await getUserPosts(selectedUserId);\n\n        setPosts(postsFromServer);\n      } catch {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getUserPostsFromServer();\n  }, [selectedUserId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  }\n\n  if (!posts.length) {\n    return (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr\n                data-cy=\"Post\"\n                key={id}\n              >\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button',\n                      'is-link',\n                      { 'is-light': selectedPost !== post },\n                    )}\n                    onClick={() => handleSelectPost(post)}\n                  >\n                    {selectedPost === post\n                      ? 'Close'\n                      : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { FormEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onAddComment: (commnet: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAddComment }) => {\n  const [nameInput, setNameInput] = useState('');\n  const [emailInput, setEmailInput] = useState('');\n  const [commentInput, setCommentInput] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const errorsCheck = () => {\n    setNameError(!nameInput.trim());\n    setEmailError(!emailInput.trim());\n    setCommentError(!commentInput.trim());\n  };\n\n  const clearAll = () => {\n    setNameError(false);\n    setEmailError(false);\n    setCommentError(false);\n    setNameInput('');\n    setEmailInput('');\n    setCommentInput('');\n  };\n\n  const postComment = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    errorsCheck();\n\n    if (nameInput && emailInput && commentInput) {\n      try {\n        setIsAddingComment(true);\n\n        const newComment = {\n          name: nameInput,\n          email: emailInput,\n          body: commentInput,\n        };\n\n        await onAddComment(newComment);\n      } catch {\n        throw new Error('Can\\'t add new comment');\n      } finally {\n        setIsAddingComment(false);\n        setCommentInput('');\n      }\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={postComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': nameError },\n            )}\n            value={nameInput}\n            onChange={(e) => {\n              setNameInput(e.target.value);\n              setNameError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': emailError },\n            )}\n            value={emailInput}\n            onChange={(e) => {\n              setEmailInput(e.target.value);\n              setEmailError(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': commentError },\n            )}\n            value={commentInput}\n            onChange={(e) => {\n              setCommentInput(e.target.value);\n              setCommentError(false);\n            }}\n          />\n        </div>\n\n        {commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isAddingComment },\n            )}\n\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearAll}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const postComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Comment, CommentData } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { deleteComment, getComments, postComment } from '../api/comments';\n\ntype Props = {\n  postId: number;\n};\n\nexport const CommentsList: React.FC<Props> = ({ postId }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadError, setLoadError] = useState(false);\n  const [addError, setAddError] = useState(false);\n  const [deleteError, setDeleteError] = useState(false);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n\n  const getPostCommentsFromServer = async () => {\n    try {\n      setComments([]);\n      setIsFormVisible(false);\n      setLoadError(false);\n      setIsLoading(true);\n      const commentsFromServer = await getComments(postId);\n\n      setComments(commentsFromServer);\n    } catch {\n      setLoadError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const postNewComment = useCallback(async (comment: CommentData) => {\n    const newComment = { ...comment, postId };\n\n    try {\n      const addedComment = await postComment(newComment);\n\n      setComments(currentComment => [...currentComment, addedComment]);\n    } catch {\n      setAddError(true);\n    }\n  }, []);\n\n  const handleDeleteComment = useCallback(async (commentId: number) => {\n    const tempComments = [...comments];\n\n    setComments(currentComments => (\n      currentComments.filter(comment => comment.id !== commentId)\n    ));\n\n    try {\n      setDeleteError(false);\n      await deleteComment(commentId);\n    } catch {\n      setComments(tempComments);\n      setDeleteError(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    getPostCommentsFromServer();\n  }, [postId]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDeleteError(false);\n      setAddError(false);\n    }, 3000);\n\n    return () => clearTimeout(timer);\n  }, [addError, deleteError]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (loadError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n        Something went wrong\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {!comments.length\n        ? (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )\n        : (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={comment.id}\n              >\n                <div className=\"message-header\">\n                  <a\n                    href={`mailto:${comment.email}`}\n                    data-cy=\"CommentAuthor\"\n                  >\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n      {addError && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"CommentsError\"\n        >\n          Can&apos;t add new comment\n        </div>\n      )}\n\n      {deleteError && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"CommentsError\"\n        >\n          Can&apos;t delete comment\n        </div>\n      )}\n\n      {!isFormVisible\n        ? (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsFormVisible(true)}\n          >\n            Write a comment\n          </button>\n        )\n        : <NewCommentForm onAddComment={postNewComment} />}\n\n    </>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const { id, title, body } = post;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          <CommentsList postId={post.id} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  selectUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  selectedUser,\n  selectUser,\n}) => {\n  const [isListOpened, setIsListOpened] = useState(false);\n  const selectionRef = useRef<HTMLDivElement>(null);\n\n  const handleSelectUser = useCallback((user: User) => {\n    selectUser(user);\n    setIsListOpened(false);\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        selectionRef.current\n        && !selectionRef.current.contains(event.target as ChildNode)\n      ) {\n        setIsListOpened(false);\n      }\n    };\n\n    window.addEventListener('click', handleClickOutside);\n\n    return () => window.removeEventListener('click', handleClickOutside);\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isListOpened },\n      )}\n      ref={selectionRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsListOpened(!isListOpened)}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': selectedUser === user },\n                )}\n                onClick={() => handleSelectUser(user)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/users';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const handleSelectUser = useCallback((user) => {\n    setSelectedUser(user);\n  }, []);\n\n  const handleSelectPost = useCallback((post) => {\n    setSelectedPost(post);\n  }, []);\n\n  useEffect(() => {\n    const getUsersFromServer = async () => {\n      try {\n        const usersFromServer = await getUsers();\n\n        setUsers(usersFromServer);\n      } catch {\n        throw new Error('Can\\'t load users');\n      }\n    };\n\n    getUsersFromServer();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  selectUser={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser\n                  ? (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )\n                  : (\n                    <PostsList\n                      selectedUserId={selectedUser.id}\n                      selectedPost={selectedPost}\n                      onSelectPost={handleSelectPost}\n                    />\n                  )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}